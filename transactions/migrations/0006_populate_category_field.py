# Generated by Django 5.2.4 on 2025-08-15 20:43

from django.db import migrations


def populate_category_field(apps, schema_editor):
    """
    Populate the new category field based on existing subcategory data.
    
    Logic:
    - If subcategory has a parent, set category = parent, keep subcategory as is
    - If subcategory has no parent (top-level), set category = subcategory, clear subcategory
    """
    Transaction = apps.get_model('transactions', 'Transaction')
    Category = apps.get_model('transactions', 'Category')
    
    print("Populating category field from existing subcategory data...")
    
    # Process transactions with subcategories
    transactions_with_subcategory = Transaction.objects.filter(subcategory__isnull=False).select_related('subcategory')
    
    updated_count = 0
    
    for transaction in transactions_with_subcategory:
        subcategory = transaction.subcategory
        
        if subcategory.parent_id:
            # Subcategory has a parent -> category = parent, keep subcategory
            transaction.category_id = subcategory.parent_id
            # subcategory remains the same
        else:
            # Subcategory is top-level -> category = subcategory, clear subcategory
            transaction.category_id = subcategory.id
            transaction.subcategory_id = None
        
        transaction.save(update_fields=['category_id', 'subcategory_id'])
        updated_count += 1
        
        if updated_count % 100 == 0:
            print(f"  Processed {updated_count} transactions...")
    
    print(f"Successfully updated {updated_count} transactions")


def reverse_populate_category_field(apps, schema_editor):
    """
    Reverse the category field population by restoring original subcategory data.
    """
    Transaction = apps.get_model('transactions', 'Transaction')
    
    print("Reversing category field population...")
    
    # For transactions with both category and subcategory -> keep as is
    # For transactions with only category -> move category to subcategory
    transactions_with_only_category = Transaction.objects.filter(
        category__isnull=False, 
        subcategory__isnull=True
    )
    
    updated_count = 0
    
    for transaction in transactions_with_only_category:
        transaction.subcategory_id = transaction.category_id
        transaction.category_id = None
        transaction.save(update_fields=['category_id', 'subcategory_id'])
        updated_count += 1
    
    print(f"Reversed {updated_count} transactions")


class Migration(migrations.Migration):

    dependencies = [
        ('transactions', '0005_add_category_field'),
    ]

    operations = [
        migrations.RunPython(populate_category_field, reverse_populate_category_field),
    ]
