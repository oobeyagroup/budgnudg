"""Defensive migration to convert Transaction.bank_account from CharField to FK.

This migration is intentionally defensive: it will add the new FK column and
attempt to migrate existing string values to FinancialAccount instances when
they exist. It will not raise if FinancialAccount rows are missing (fresh
databases/CI), so applying migrations on an empty DB is safe.
"""

from django.db import migrations, models


def forwards(apps, schema_editor):
    # Add bank_account field as nullable FK; Django handles the DB column add.
    Transaction = apps.get_model("transactions", "Transaction")
    FinancialAccount = apps.get_model("ingest", "FinancialAccount")

    # If there are existing transactions with bank_account string values,
    # try to map them to a FinancialAccount with the same name. Use filter().first()
    # to avoid raising DoesNotExist on fresh DBs.
    if schema_editor.connection.introspection.table_names():
        # Iterate existing rows and map where possible
        for txn in Transaction.objects.all():
            try:
                # Older rows may have stored the account name in the DB column
                name = getattr(txn, "bank_account")
            except Exception:
                name = None
            if name and not isinstance(name, int):
                fa = FinancialAccount.objects.filter(name=name).first()
                if fa:
                    txn.bank_account = fa
                    txn.save(update_fields=["bank_account"])


def backwards(apps, schema_editor):
    # For backwards migration, leave the string data as-is; Django will restore
    # the previous CharField state when reversing the migration stack.
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("transactions", "0011_add_payoree_to_keyword_rules"),
        ("ingest", "0009_rename_mappingprofile_financialaccount"),
    ]

    operations = [
        migrations.AddField(
            model_name="transaction",
            name="bank_account",
            field=models.ForeignKey(
                to="ingest.FinancialAccount",
                on_delete=models.SET_NULL,
                null=True,
                blank=True,
            ),
        ),
        migrations.RunPython(forwards, backwards),
    ]


# Generated by Django 5.2.4 on 2025-08-28 12:35

import django.db.models.deletion
from django.db import migrations, models


def convert_bank_account_data(apps, schema_editor):
    """Convert string bank_account values to ForeignKey IDs."""
    Transaction = apps.get_model("transactions", "Transaction")
    FinancialAccount = apps.get_model("ingest", "FinancialAccount")
    # Try to look up known FinancialAccount records, but be defensive:
    # use filter().first() so this migration is safe on fresh DBs without
    # seeded FinancialAccount rows.
    chase_account = FinancialAccount.objects.filter(name="Chase Checking 3607").first()
    marriott_account = FinancialAccount.objects.filter(
        name="Marriott Visa 7427"
    ).first()

    # Update Transaction records only when the corresponding FinancialAccount
    # exists. Skip silently otherwise so migrations don't fail on CI/fresh DBs.
    if chase_account:
        # Use FK-aware filtering on the pre-migration string column by matching
        # the stored name and assigning the FK object. Be defensive: filter
        # by the string value but update the FK field with the object.
        Transaction.objects.filter(bank_account__name="Chase Checking 3607").update(
            bank_account=chase_account
        )
    if marriott_account:
        Transaction.objects.filter(bank_account__name="Marriott Visa 7427").update(
            bank_account=marriott_account
        )


class Migration(migrations.Migration):

    dependencies = [
        ("ingest", "0011_alter_scannedcheck_bank_account"),
        ("transactions", "0011_add_payoree_to_keyword_rules"),
    ]

    operations = [
        migrations.RenameIndex(
            model_name="transaction",
            new_name="transaction_date_7d5da2_idx",
            old_name="transaction_date_c0566d_idx",
        ),
        migrations.RunPython(
            convert_bank_account_data,
            migrations.RunPython.noop,  # No reverse operation needed
        ),
        migrations.AlterField(
            model_name="transaction",
            name="bank_account",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="ingest.financialaccount",
            ),
        ),
    ]
